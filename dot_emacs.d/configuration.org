#+TITLE: Emacs Configuration
#+AUTHOR: Zach
#+EMAIL:
#+OPTIONS: toc:nil num:nil
This is a test org config file that's a frankenstein from
 https://github.com/hrs/dotfiles/blob/main/emacs/dot-emacs.d/configuration.org
which is much more organized and thought.

* Configure =use-package=

I use =use-package= to install and configure my packages. My =init.el= includes
the initial setup for =package.el= and ensures that =use-package= is installed,
since I wanna do that right away.

This makes sure that =use-package= will install the package if it's not already
available. It also means that I should be able to open Emacs for the first time
on a fresh Debian box and have my whole environment automatically installed. I'm
not /totally/ sure about that, but we're gettin' close.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+end_src

* Set personal information

** Who am I? Where am I?

# #+begin_src emacs-lisp
#   (setq user-full-name ""
#         user-mail-address ""
#         calendar-latitude 0.0
#         calendar-longitude 0.0
#         calendar-location-name "")
# #+end_src

# * Add =resources= to =load-path=

# #+begin_src emacs-lisp
#   (add-to-list 'load-path "~/.emacs.d/resources/")
# #+end_src

* Utility functions

Define a big ol' bunch of handy utility functions.

#+begin_src emacs-lisp
  (defun zb/rename-file (new-name)
    (interactive "FNew name: ")
    (let ((filename (buffer-file-name)))
      (if filename
	  (progn
	    (when (buffer-modified-p)
	      (save-buffer))
	    (rename-file filename new-name t)
	    (kill-buffer (current-buffer))
	    (find-file new-name)
	    (message "Renamed '%s' -> '%s'" filename new-name))
	(message "Buffer '%s' isn't backed by a file!" (buffer-name)))))

  (defun zb/generate-scratch-buffer ()
    "Create and switch to a temporary scratch buffer with a random
	 name."
    (interactive)
    (switch-to-buffer (make-temp-name "scratch-")))

  (defun zb/find-file-as-sudo ()
    (interactive)
    (let ((file-name (buffer-file-name)))
      (when file-name
	(find-alternate-file (concat "/sudo::" file-name)))))

  (defun zb/region-or-word ()
    (if mark-active
	(buffer-substring-no-properties (region-beginning)
					(region-end))
      (thing-at-point 'word)))

  (defun zb/append-to-path (path)
    "Add a path both to the $PATH variable and to Emacs' exec-path."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (add-to-list 'exec-path path))

  (defun zb/insert-password ()
    (interactive)
    (shell-command "pwgen 30 -1" t))

  (defun zb/notify-send (title message)
    "Display a desktop notification by shelling out to `notify-send'."
    (call-process-shell-command
     (format "notify-send -t 2000 \"%s\" \"%s\"" title message)))
#+end_src

* UI preferences

** UTF-8 complience

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
#+end_src

** =treemacs=

# #+begin_src emacs-lisp
#   (use-package treemacs)
# ;;  (treemacs-enable)
# #+end_src

** Tweak window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
  (global-linum-mode t)
  (column-number-mode t)
;;  (setq inhibit-startup-message t)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Ido mode

#+begin_src emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src

** Visual Line Mode

#+begin_src emacs-lisp
  (global-visual-line-mode)
#+end_src

The default frame title isn't useful. This binds it to the name of the current
project:

#+begin_src emacs-lisp
  (setq frame-title-format "%b")
  ;; (setq frame-title-format '((:eval (projectile-project-name))))
#+end_src

** Use fancy lambdas

Why not?

#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src

** Load up a theme
#+begin_src emacs-lisp
  (use-package abyss-theme)
  (load-theme 'abyss t)
#+end_src

    # abyss-theme
    # underwater-theme
    # challenger-deep-theme
    # cyberpunk-theme
    # dakrone-theme
    # dracula-theme
    # espresso-theme
    # exotica-theme

** Use =moody= for a beautiful modeline

This gives me a truly lovely ribbon-based modeline.

#+begin_src emacs-lisp
    (use-package moody
      :config
      (setq x-underline-at-descent-line t
	    moody-mode-line-height 30)
    (moody-replace-mode-line-buffer-identification))
;;    (moody-replace-vc-mode))
#+end_src


** Use =minions= to hide all minor modes

I never want to see a minor mode, and manually adding =:diminish= to every
use-package declaration is a hassle. This uses =minions= to hide all the minor
modes in the modeline. Nice!

By default there's a =;-)= after the major mode; that's an adorable default, but
I'd rather skip it.

#+begin_src emacs-lisp
   (use-package minions
     :config
     (setq minions-mode-line-lighter ""
           minions-mode-line-delimiters '("" . ""))
     (minions-mode 1))
#+end_src

** Set default font and configure font resizing

I'm partial to Source Code Pro.

The standard =text-scale-= functions just resize the text in the current buffer;
I'd generally like to resize the text in /every/ buffer, and I usually want to
change the size of the modeline, too (this is especially helpful when
presenting). These functions and bindings let me resize everything all together!

Note that this overrides the default font-related keybindings from
=sensible-defaults=.

#+begin_src emacs-lisp
  (setq zb/default-font "Source Code Pro")
  (setq zb/default-font-size 12)
  (setq zb/current-font-size zb/default-font-size)

  (setq zb/font-change-increment 1.1)

  (defun zb/font-code ()
    "Return a string representing the current font (like \"Source Code Pro-14\")."
    (concat zb/default-font "-" (number-to-string zb/current-font-size)))

  (defun zb/set-font-size ()
    "Set the font to `zb/default-font' at `zb/current-font-size'.
  Set that for the current frame, and also make it the default for
  other, future frames."
    (let ((font-code (zb/font-code)))
      (if (assoc 'font default-frame-alist)
	  (setcdr (assoc 'font default-frame-alist) font-code)
	(add-to-list 'default-frame-alist (cons 'font font-code)))
      (set-frame-font font-code)))

  (defun zb/reset-font-size ()
    "Change font size back to `zb/default-font-size'."
    (interactive)
    (setq zb/current-font-size zb/default-font-size)
    (zb/set-font-size))

  (defun zb/increase-font-size ()
    "Increase current font size by a factor of `zb/font-change-increment'."
    (interactive)
    (setq zb/current-font-size
	  (ceiling (* zb/current-font-size zb/font-change-increment)))
    (zb/set-font-size))

  (defun zb/decrease-font-size ()
    "Decrease current font size by a factor of `zb/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq zb/current-font-size
	  (max 1
	  (floor (/ zb/current-font-size zb/font-change-increment))))
    (zb/set-font-size))

  (define-key global-map (kbd "C-)") 'zb/reset-font-size)
  (define-key global-map (kbd "C-+") 'zb/increase-font-size)
  (define-key global-map (kbd "C--") 'zb/decrease-font-size)
  (zb/reset-font-size)
#+end_src

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.

#+begin_src emacs-lisp
  (use-package diff-hl
    :config
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+end_src

* Project management

I use a few packages in virtually every programming or writing environment to
manage the project, handle auto-completion, search for terms, and deal with
version control. That's all in here.

# ** =ag=

# Install =ag= to provide search within projects (usually through
# =projectile-ag=).

# #+begin_src emacs-lisp
#   (use-package ag)
# #+end_src

** =company=

Use =company-mode= everywhere.

#+begin_src emacs-lisp
  (use-package company)
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

Use =M-/= for completion.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-/") 'company-complete-common)
#+end_src

# ** =dumb-jump=

# The =dumb-jump= package works well enough in a [[https://github.com/jacktasia/dumb-jump#supported-languages][ton of environments]], and it
# doesn't require any additional setup. I've bound its most useful command to
# =M-.=.

# #+begin_src emacs-lisp
#   (use-package dumb-jump
#     :config
#     (define-key evil-normal-state-map (kbd "M-.") 'dumb-jump-go)
#     (setq dumb-jump-selector 'ivy))
# #+end_src

** =flycheck=

I'd like to enable flycheck all kinds of places.

#+begin_src emacs-lisp
  (use-package let-alist)
  (use-package flycheck
    :hook ruby-mode)
#+end_src

** =magit=

I use =magit= to handle version control. It's lovely, but I tweak a few things:

- I bring up the status menu with =C-x g=.
- Use =evil= keybindings with =magit=.
- The default behavior of =magit= is to ask before pushing. I haven't had any
  problems with accidentally pushing, so I'd rather not confirm that every time.
- Per [[http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][tpope's suggestions]], highlight commit text in the summary line that goes
  beyond 50 characters.
- I'd like to start in the insert state when writing a commit message.

#+begin_src emacs-lisp
  (use-package magit
    :bind
    ("C-x g" . magit-status)

    :config
    (use-package with-editor)

    (setq magit-push-always-verify nil
	  git-commit-summary-max-length 50))
#+end_src

# I've been playing around with the newly-released =forge= for managing GitHub PRs
# and issues. Seems slick so far.

# #+begin_src emacs-lisp
#   (use-package ghub)
#   (use-package forge)
# #+end_src

I'm also partial to =git-timemachine=, which lets you quickly page through the
history of a file.

#+begin_src emacs-lisp
  (use-package git-timemachine)
#+end_src

** =projectile=

Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky enough
that I rarely use it (and forget it when I need it). This binds it to the
easier-to-type =C-c v= to useful searches.

Bind =C-p= to fuzzy-finding files in the current project. We also need to
explicitly set that in a few other modes.

I use =ivy= as my completion system.

When I visit a project with =projectile-switch-project=, the default action is
to search for a file in that project. I'd rather just open up the top-level
directory of the project in =dired= and find (or create) new files from there.

I'd like to /always/ be able to recursively fuzzy-search for files, not just
when I'm in a Projectile-defined project. I use the current directory as a
project root (if I'm not in a "real" project).

#+begin_src emacs-lisp
  (use-package projectile
    :bind
    ("C-c v" . projectile-ag)

    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

    (setq projectile-completion-system 'ivy
	  projectile-switch-project-action 'projectile-dired
	  projectile-require-project-root nil))
#+end_src

** =restclient=

# #+begin_src emacs-lisp
#   (use-package restclient)
#   (use-package company-restclient
#     :config
#     (add-to-list 'company-backends 'company-restclient))
# #+end_src

** =undo-tree=

# I like tree-based undo management. I only rarely need it, but when I do, oh boy.

# #+begin_src emacs-lisp
#   (use-package undo-tree)
# #+end_src

* Programming environments

I like shallow indentation, but tabs are displayed as 8 characters by default.
This reduces that.

#+begin_src emacs-lisp
  (setq-default tab-width 2)
#+end_src

Treating terms in CamelCase symbols as separate words makes editing a little
easier for me, so I like to use =subword-mode= everywhere.

#+begin_src emacs-lisp
  (use-package subword
    :config (global-subword-mode 1))
#+end_src

Compilation output goes to the =*compilation*= buffer. I rarely have that window
selected, so the compilation output disappears past the bottom of the window.
This automatically scrolls the compilation window so I can always see the
output.

#+begin_src emacs-lisp
  (setq compilation-scroll-output t)
#+end_src

I use =eglot= as my LSP client.

#+begin_src emacs-lisp
  (use-package eglot)
#+end_src

** Coq

# I use =company-coq-mode=, which really helps make Proof General a more useful IDE.

# #+begin_src emacs-lisp
#   (use-package company-coq)
# #+end_src

# I bind the right and left arrow keys to evaluating and retracting the next and
# previous statements. This is more convenient than the default bindings of =C-c
# C-n= and =C-c C-u=.

# I also like to disable =abbrev-mode=; it has a ton of abbreviations for Coq, but
# they've always been unpleasant surprises for me.

# #+begin_src emacs-lisp
#   (add-hook 'coq-mode-hook
#             (lambda ()
#               (company-coq-mode)
#               (evil-define-key 'normal coq-mode-map (kbd "<down>") 'proof-assert-next-command-interactive)
#               (evil-define-key 'normal coq-mode-map (kbd "<up>") 'proof-undo-last-successful-command)
#               (evil-define-key 'normal coq-mode-map (kbd "<return>") 'company-coq-proof-goto-point)
#               (abbrev-mode 0)))
# #+end_src

# The default Proof General layout stacks the code, goal, and response buffers on
# top of each other. I like to keep my code on one side and my goal and response
# buffers on the other.

# #+begin_src emacs-lisp
#   (setq proof-three-window-mode-policy 'hybrid)
# #+end_src

# Don't move point when asserting and undoing proof commands.

# #+begin_src emacs-lisp
#   (setq proof-follow-mode 'ignore)
# #+end_src

# The Proof General splash screen's pretty cute, but I don't need to see it every
# time.

# #+begin_src emacs-lisp
#   (setq proof-splash-enable nil)
# #+end_src

# Proof General usually evaluates each comment individually. In literate programs,
# this can result in evaluating a /ton/ of comments. This evaluates a series of
# consecutive comments as a single comment.

# #+begin_src emacs-lisp
#   (setq proof-script-fly-past-comments t)
# #+end_src

** CSS, Sass, and Less

Indent by 2 spaces.

#+begin_src emacs-lisp
  (use-package css-mode
    :config
    (setq css-indent-offset 2))
#+end_src

Don't compile the current SCSS file every time I save.

#+begin_src emacs-lisp
  (use-package scss-mode
    :config
    (setq scss-compile-at-save nil))
#+end_src

Install Less.

#+begin_src emacs-lisp
  (use-package less-css-mode)
#+end_src

** Golang

Install =go-mode= and related packages:

#+begin_src emacs-lisp
  (use-package go-mode)
  (use-package go-errcheck)
  (use-package company-go)
#+end_src

Define my =$GOPATH= and tell Emacs where to find the Go binaries.

#+begin_src emacs-lisp
  (setenv "GOPATH" "/home/zach/code/go")
  (zb/append-to-path (concat (getenv "GOPATH") "/bin"))
#+end_src

Run =goimports= on every file when saving, which formats the file and
automatically updates the list of imports. This requires that the =goimports=
binary be installed.

#+begin_src emacs-lisp
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
#+end_src

When I open a Go file,

- Start up =company-mode= with the Go backend. This requires that the =gocode=
  binary is installed,
- Redefine the default =compile= command to something Go-specific, and
- Enable =flycheck=.

#+begin_src emacs-lisp
  (add-hook 'go-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends)
                   '(company-go))
              (company-mode)
              (if (not (string-match "go" compile-command))
                  (set (make-local-variable 'compile-command)
                       "go build -v && go test -v && go vet"))
              (flycheck-mode)))
#+end_src

# ** Haml and Slim

# Install the Haml and Slim packages.

# #+begin_src emacs-lisp
#   (use-package haml-mode)
#   (use-package slim-mode)
# #+end_src

** Haskell

#+begin_src emacs-lisp
  (use-package haskell-mode)
#+end_src

Enable =haskell-doc-mode=, which displays the type signature of a function, and
use smart indentation.

#+begin_src emacs-lisp
  (add-hook 'haskell-mode-hook
            (lambda ()
              (haskell-doc-mode)
              (turn-on-haskell-indent)))
#+end_src

#+begin_src emacs-lisp
  (zb/append-to-path "~/.cabal/bin")
#+end_src

** JavaScript and CoffeeScript

Install =coffee-mode= from editing CoffeeScript code.

#+begin_src emacs-lisp
  (use-package coffee-mode)
#+end_src

Indent everything by 2 spaces.

#+begin_src emacs-lisp
  (setq js-indent-level 2)

  (add-hook 'coffee-mode-hook
            (lambda ()
              (yas-minor-mode 1)
              (setq coffee-tab-width 2)))
#+end_src

** Lisps

*** Racket

# #+begin_src emacs-lisp
#   (use-package racket-mode)
# #+end_src

# [[https://docs.racket-lang.org/pollen/][Pollen]] uses a lozenge ◊ to mark preprocessor commands (like defining and
# dereferencing variables). That's awkward to type, so this lets me hit =M-^= to
# insert one.

# #+begin_src emacs-lisp
#   (defun zb/insert-lozenge ()
#     (interactive)
#     (insert "◊"))

#   (define-key racket-mode-map (kbd "M-^") 'zb/insert-lozenge)
# #+end_src

*** All Lisps

I like to use =paredit= in Lisp modes to balance parentheses (and more!).

#+begin_src emacs-lisp
  (use-package paredit)
#+end_src

=rainbow-delimiters= is convenient for coloring matching parentheses.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters)
#+end_src

All the lisps have some shared features, so we want to do the same things for
all of them. That includes using =paredit=, =rainbow-delimiters=, and
highlighting the whole expression when point is on a parenthesis.

#+begin_src emacs-lisp
  (setq lispy-mode-hooks
        '(clojure-mode-hook
          emacs-lisp-mode-hook
          lisp-mode-hook
          scheme-mode-hook))

  (dolist (hook lispy-mode-hooks)
    (add-hook hook (lambda ()
                     (setq show-paren-style 'expression)
                     (paredit-mode)
                     (rainbow-delimiters-mode))))
#+end_src

If I'm writing in Emacs lisp I'd like to use =eldoc-mode= to display
documentation.

#+begin_src emacs-lisp
  (use-package eldoc
    :config
    (add-hook 'emacs-lisp-mode-hook 'eldoc-mode))
#+end_src

I also like using =flycheck-package= to ensure that my Elisp packages are
correctly formatted.

#+begin_src emacs-lisp
  (use-package flycheck-package)

  (eval-after-load 'flycheck
    '(flycheck-package-setup))
#+end_src

# ** OCaml

# Use =tuareg-mode= for editing OCaml.

# #+begin_src emacs-lisp
#   (use-package tuareg
#     :config
#     (electric-indent-mode 0))
# #+end_src

# Configure Merlin. This also requires installing the Merlin package through OPAM
# with =opam install merlin=.

# #+begin_src emacs-lisp
#   (use-package merlin
#     :config
#     (add-hook 'tuareg-mode-hook 'merlin-mode t)

#     (with-eval-after-load 'company
#       (add-to-list 'company-backends 'merlin-company-backend))
#     (add-hook 'merlin-mode-hook 'company-mode))
# #+end_src

** Python

Use python-mode package and set python executable path depending on OS.
#+begin_src emacs-lisp
  (use-package python-mode)
  (cond
    ((string-equal system-type "windows-nt")
      (progn
        (zb/append-to-path "C:\\Python38\\Scripts")))
    ((string-equal system-type "gnu/linux")
      (progn
        (zb/append-to-path "~/.local/bin"))))
#+end_src

Enable =elpy=. This provides automatic indentation, auto-completion, syntax
checking, etc.

#+begin_src emacs-lisp
  (use-package elpy)
  (elpy-enable)
  (setq python-shell-interpreter "python"
        python-shell-interpreter-args "-i")
#+end_src

Use =flycheck= for syntax checking:

#+begin_src emacs-lisp
  (add-hook 'elpy-mode-hook 'flycheck-mode)
#+end_src

# Use =blacken= to quickly format other people's Python scripts into something
# that resembles PEP8 standards (I'm looking at you, Bill)

# #+begin_src emacs-lisp
#   (use-package blacken)
#   (blacken-enable)
# #+end_src


Format code according to PEP8 on save:

# #+begin_src emacs-lisp
#   (use-package py-autopep8)
#   (require 'py-autopep8)
#   (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
# #+end_src

Configure Jedi along with the associated =company= mode:

#+begin_src emacs-lisp
  (use-package company-jedi)
  (add-to-list 'company-backends 'company-jedi)

  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t)
#+end_src

** Rust

Use =rust-mode= to edit Rust code.

Run =rustfmt= automatically when saving a file.

#+begin_src emacs-lisp
  (use-package rust-mode
    :config
    (zb/append-to-path "~/.cargo/bin")
    (setq rust-format-on-save t))
#+end_src

** =sh=

Indent with 2 spaces.

#+begin_src emacs-lisp
  (add-hook 'sh-mode-hook
            (lambda ()
              (setq sh-basic-offset 2
                    sh-indentation 2)))
#+end_src

** Scala

# Ensure that =scala-mode= and =sbt-mode= are installed.

# #+begin_src emacs-lisp
#   (use-package scala-mode
#     :interpreter
#     ("scala" . scala-mode))
#   (use-package sbt-mode)
# #+end_src

# Don't show the startup message with launching ENSIME:

# #+begin_src emacs-lisp
#   (setq ensime-startup-notification nil)
# #+end_src

# Bind a few keys to common operations:

# #+begin_src emacs-lisp
#   (evil-define-key 'normal ensime-mode-map (kbd "C-t") 'ensime-type-at-point)
#   (evil-define-key 'normal ensime-mode-map (kbd "M-.") 'ensime-edit-definition)
# #+end_src

** Terraform

# Install =terraform-mode=.

# #+begin_src emacs-lisp
#   (use-package terraform-mode)
#   (use-package company-terraform)
# #+end_src

# ** =web-mode=

# #+begin_src emacs-lisp
#   (use-package web-mode
#     :config
#     (setq web-mode-markup-indent-offset 2
#           web-mode-css-indent-offset 2
#           web-mode-code-indent-offset 2
#           web-mode-indent-style 2))
# #+end_src

# I'd like to see colors with =rainbow-mode=, so we'll need to install that, too:

# #+begin_src emacs-lisp
#   (use-package rainbow-mode
#     :hook web-mode)
# #+end_src

# Use =web-mode= with embedded Ruby files, regular HTML, and PHP.

# #+begin_src emacs-lisp
#   (zb/add-auto-mode
#    'web-mode
#    "\\.erb$"
#    "\\.html$"
#    "\\.php$"
#    "\\.rhtml$")
# #+end_src

** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

* Terminal

# I use =multi-term= to manage my shell sessions. It's bound to =C-c t=.

# #+begin_src emacs-lisp
#   (use-package multi-term)
#   (global-set-key (kbd "C-c t") 'multi-term)
# #+end_src

# Use a login =bash= shell:

# #+begin_src emacs-lisp
#   (setq multi-term-program-switches "--login")
# #+end_src

I add a bunch of hooks to =term-mode=:

- I'd like links (URLs, etc) to be clickable.
- Yanking in =term-mode= doesn't quite work. The text from the paste appears in
  the buffer but isn't sent to the shell process. This correctly binds =C-y= and
  middle-click to yank the way we'd expect.
- I bind =M-o= to quickly change windows. I'd like that in terminals, too.
- I don't want to perform =yasnippet= expansion when tab-completing.

#+begin_src emacs-lisp
  (defun zb/term-paste (&optional string)
    (interactive)
    (process-send-string
     (get-buffer-process (current-buffer))
     (if string string (current-kill 0))))

  (add-hook 'term-mode-hook
            (lambda ()
              (goto-address-mode)
              (define-key term-raw-map (kbd "C-y") 'zb/term-paste)
              (define-key term-raw-map (kbd "<mouse-2>") 'zb/term-paste)
              (define-key term-raw-map (kbd "M-o") 'other-window))
              (setq yas-dont-activate t))
#+end_src

* Publishing and task management with Org-mode

I'd like the initial scratch buffer to be in Org:

#+begin_src emacs-lisp
  (setq initial-major-mode 'org-mode)
#+end_src

** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

# #+begin_src emacs-lisp
#   (use-package org-bullets
#     :init
#     (add-hook 'org-mode-hook 'org-bullets-mode))
# #+end_src

# I like seeing a little downward-pointing arrow instead of the usual ellipsis
# (=...=) that org displays when there's stuff under a header.

# #+begin_src emacs-lisp
#   (setq org-ellipsis "⤵")
# #+end_src

# Use syntax highlighting in source blocks while editing.

# #+begin_src emacs-lisp
#   (setq org-src-fontify-natively t)
# #+end_src

# Make TAB act as if it were issued in a buffer of the language's major mode.

# #+begin_src emacs-lisp
#   (setq org-src-tab-acts-natively t)
# #+end_src

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

# #+begin_src emacs-lisp
#   (setq org-src-window-setup 'current-window)
# #+end_src

Quickly insert a block of elisp:

# #+begin_src emacs-lisp
#   (add-to-list 'org-structure-template-alist
#                '("el" . "src emacs-lisp"))
# #+end_src

Don't indent newly expanded blocks, even if they're under a heading.

# #+begin_src emacs-lisp
#   (setq org-adapt-indentation nil)
# #+end_src

** Task management and agenda views

Store my org files in =~/documents/org=, maintain an inbox in Dropbox, define
the location of an index file (my main todo list), and archive finished tasks in
=~/documents/org/archive.org=.

#+begin_src emacs-lisp
  (setq org-directory "~/Documents/org")

  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-inbox-file "~/sync/Dropbox/inbox.org")
  (setq org-index-file (org-file-path "index.org"))
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+end_src

I use [[http://agiletortoise.com/drafts/][Drafts]] to create new tasks, format them according to a template, and
append them to an "inbox.org" file in my Dropbox. This function lets me import
them easily from that inbox file to my index.

#+begin_src emacs-lisp
  (defun zb/copy-tasks-from-inbox ()
    (when (file-exists-p org-inbox-file)
      (save-excursion
        (find-file org-index-file)
        (goto-char (point-max))
        (insert-file-contents org-inbox-file)
        (delete-file org-inbox-file))))
#+end_src

I store most of my personal tasks in my index and maintain a separate file for
work-related tasks, so I'd like to derive my agenda from those files. I've also
got some annual OKRs in =goals.org=.

I also keep a schedule in =events.org=. Plus some recurring events in,
reasonably, a =recurring-events.org= file. Those are (mostly) structured as
=org-habit= items so they can recur according to a schedule.

#+begin_src emacs-lisp
  (setq org-agenda-files (list org-index-file
                               (org-file-path "events.org")
                               (org-file-path "goals.org")
                               (org-file-path "recurring-events.org")
                               (org-file-path "work.org")))
#+end_src

Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
place in the archive.

#+begin_src emacs-lisp
  (defun zb/mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key org-mode-map (kbd "C-c C-x C-s") 'zb/mark-done-and-archive)
#+end_src

Record the time that a todo was archived.

#+begin_src emacs-lisp
  (setq org-log-done 'time)
#+end_src

Ensure that a task can't be marked as done if it contains unfinished subtasks or
checklist items. This is handy for organizing "blocking" tasks hierarchically.

#+begin_src emacs-lisp
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
#+end_src

Begin weeks /today/, not on the last Monday.

#+begin_src emacs-lisp
  (setq org-agenda-start-on-weekday nil)
#+end_src

# Hide the category prefix from tasks. In practice, I've usually only got one or
# two files of tasks, so prefixing tasks with the file they're stored in is mostly
# redundant.

# #+begin_src emacs-lisp
#   (setq org-agenda-prefix-format '((agenda . " %i %?-12t% s")
#                                    (todo . " %i ")
#                                    (tags . " %i ")
#                                    (search . " %i ")))
# #+end_src

I use =org=habit= to schedule recurring events and reminders for myself.

#+begin_src emacs-lisp
  (require 'org-habit)
#+end_src

# Don't show the =org-habit= consistency graph. I don't actually find it
# motivating, personally, and it kinda visually fills up my agenda. There's no
# provided way to disable the graph, as far as I can tell, so I've just redefined
# the function to do nothing.

# #+begin_src emacs-lisp
#   (defun org-habit-build-graph (habit starting current ending)
#     "                             ")
#   (setq org-habit-graph-column 60)
# #+end_src

I've got some custom agenda views that I use to visualize what I'm working on.

The "Personal agenda" view is a bit complicated; it displays:

1. My agenda for the next few days, including any recurring habits or scheduled
   events,
2. All the other, not-high-priority non-habit TODO items,
3. All the PENDING tasks, which are awaiting a response from someone else but
   still require my attention (I might need to ping someone, say), and
4. All the BLOCKED tasks, which are pending other tasks (but might be worth
   keeping an eye on anyway).

I effectively use the "A" priority to decide where I want to focus my attention
on a given day (I'll assign those priorities the night before, if I'm really on
top of things), so displaying them at the top makes sense.

A lot of this is based on [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][Aaron Bieber's agenda configuration]], including the
=skip-subtree-if-priority= and =skip-subtree-if-habit= functions, which I've
shamelessly stolen and re-prefixed.

#+begin_src emacs-lisp
  (defun zb/org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

  (defun zb/org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))

  (setq org-agenda-custom-commands
        '(("p" "Personal agenda"
           ((agenda "")
            (todo "TODO"
                  ((org-agenda-skip-function '(or (zb/org-skip-subtree-if-priority ?A)
                                                  (zb/org-skip-subtree-if-habit)))
                   (org-agenda-overriding-header "Other tasks:")))
            (todo "PENDING"
                  ((org-agenda-skip-function '(zb/org-skip-subtree-if-priority ?A))
                   (org-agenda-overriding-header "Pending:")))
            (todo "BLOCKED"
                  ((org-agenda-skip-function '(zb/org-skip-subtree-if-priority ?A))
                   (org-agenda-overriding-header "Blocked:")))))))
#+end_src

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
# ;; Org-Mode tweaks
# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
# (setq org-todo-keywords
#       '((sequence "TODO(t)" "|" "DONE(d)")
#         (sequence "WAITING(w)" "CANCELED(c)")
# 	(sequence "ACTIVE(a)")))
# (setq org-todo-keyword-faces
#       '(("ACTIVE" . (:foreground "yellow")) ("WAITING" . (:foreground "cyan")) ("CANCELED" . (:foreground "purple" :weight bold))))


# ;; Bind Org Capture to C-c c
# (global-set-key "\C-cc" 'org-capture)

# ;; (setq org-default-notes-file (concat "~/Nextcloud/GTD/inbox.org"))
# ;; (add-to-list 'org-capture-templates
# ;;              '("t" "To Do"  entry
# ;;                (file "~/Nextcloud/GTD/inbox.org")
# ;;                "* TODO %?" :empty-lines 1))

# ;; (add-to-list 'org-capture-templates
#              ;; '("w" "Work-related Task"  entry
#              ;;   (file "~/Nextcloud/GTD/work.org")
#              ;;   "* TODO %?" :empty-lines 1))


I consult my agenda pretty often, so I bind =C-c d= to open it a it faster. This
also copies any files I've sent through Drafts into my index file before
displaying the index, so they'll be in the agenda view, too.

#+begin_src emacs-lisp
  (defun zb/dashboard ()
    (interactive)
    (zb/copy-tasks-from-inbox)
    (find-file org-index-file)
    (org-agenda nil "p"))

  (global-set-key (kbd "C-c d") 'zb/dashboard)
#+end_src

*** Capturing tasks

Define a few common tasks as capture templates. Specifically, I frequently:

- Record ideas for future blog posts in =~/Documents/notes/blog-ideas.org=,
- Maintain a todo list in =~/Documents/org/index.org=.
- Convert emails into todos to maintain an empty inbox.

#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("b" "Blog idea"
           entry
           (file "~/Documents/notes/blog-ideas.org")
           "* %?\n")

          ("c" "Contact"
           entry
           (file "~/Documents/contacts.org")
           "* %(org-contacts-template-name)
  :PROPERTIES:
  :ADDRESS: %^{123 Fake St., City, ST 12345}
  :PHONE: %^{555-555-5555}
  :EMAIL: %(org-contacts-template-email)
  :NOTE: %^{note}
  :END:")

          ("d" "Delivery" entry
           (file+headline "~/Documents/org/events.org" "Deliveries")
           "** %?\n   SCHEDULED: %t\n")

          ("e" "Email" entry
           (file+headline org-index-file "Inbox")
           "* TODO %?\n\n%a\n\n")

          ("f" "Finished book"
           table-line (file "~/Documents/notes/books-read.org")
           "| %^{Title} | %^{Author} | %u |")

          ("s" "Subscribe to an RSS feed"
           plain
           (file "~/Documents/rss-feeds.org")
           "*** [[%^{Feed URL}][%^{Feed name}]]")

          ("t" "Todo"
           entry
           (file+headline org-index-file "Inbox")
           "* TODO %?\n:PROPERTIES:\nCREATED: %u\n:END:\n")))
#+end_src

Refiling according to the document's hierarchy.

#+begin_src emacs-lisp
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)
#+end_src

*** Keybindings

Bind a few handy keys.

#+begin_src emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+end_src

Hit =C-c i= to quickly open up my todo list.

#+begin_src emacs-lisp
  (defun zb/open-index-file ()
    "Open the master org TODO list."
    (interactive)
    (zb/copy-tasks-from-inbox)
    (find-file org-index-file)
    (flycheck-mode -1)
    (end-of-buffer))

  (global-set-key (kbd "C-c i") 'zb/open-index-file)
#+end_src

Hit =M-n= to quickly open up a capture template for a new todo.

#+begin_src emacs-lisp
  (defun org-capture-todo ()
    (interactive)
    (org-capture :keys "t"))

  (global-set-key (kbd "M-n") 'org-capture-todo)
  (add-hook 'gfm-mode-hook
            (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
  (add-hook 'haskell-mode-hook
            (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
#+end_src

Hit =C-c w= to quickly open up my work todo list.

#+begin_src emacs-lisp
  (defun zb/open-work-file ()
    "Open the work TODO list."
    (interactive)
    (find-file (org-file-path "work.org"))
    (flycheck-mode -1)
    (end-of-buffer))

  (global-set-key (kbd "C-c w") 'zb/open-work-file)
#+end_src

** Exporting

Allow export to markdown and beamer (for presentations).

#+begin_src emacs-lisp
  (require 'ox-md)
  (require 'ox-beamer)
#+end_src

# Allow =babel= to evaluate Emacs lisp, Ruby, =ditaa=, Graphviz, or Gnuplot code.

# #+begin_src emacs-lisp
#   (use-package gnuplot)

#   (org-babel-do-load-languages
#    'org-babel-load-languages
#    '((emacs-lisp . t)
#      (dot . t)))
# #+end_src

Don't ask before evaluating code blocks.

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

Use =htmlize= to ensure that exported code blocks use syntax highlighting.

#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

# Associate the "dot" language with the =graphviz-dot= major mode.

# #+begin_src emacs-lisp
#   (use-package graphviz-dot-mode)
#   (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
# #+end_src

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+begin_src emacs-lisp
  (setq org-export-with-smart-quotes t)
#+end_src

**** Exporting to HTML

Don't include a footer with my contact and publishing information at the bottom
of every exported HTML document.

#+begin_src emacs-lisp
  (setq org-html-postamble nil)
#+end_src

Exporting to HTML and opening the results triggers =/usr/bin/sensible-browser=,
which checks the =$BROWSER= environment variable to choose the right browser.
I'd like to always use Firefox, so:

#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "firefox")

  (setenv "BROWSER" "firefox")
#+end_src

**** Exporting to PDF

I want to produce PDFs with syntax highlighting in the code. The best way to do
that seems to be with the =minted= package, but that package shells out to
=pygments= to do the actual work. =pdflatex= usually disallows shell commands;
this enables that.

#+begin_src emacs-lisp
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

Include the =minted= package in all of my LaTeX exports.

#+begin_src emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+end_src

* TeX configuration

I rarely write LaTeX directly any more, but I often export through it with
org-mode, so I'm keeping them together.


# ;; TeX-engine options
# ;;   'xetex
# ;;   'xelatex
# ;;   'pdflatex

Always use =pdflatex= when compiling LaTeX documents. I don't really have any
use for DVIs.

#+begin_src emacs-lisp
  (setq TeX-PDF-mode t)
#+end_src

#+begin_src emacs-lisp
  (setq-default TeX-engine 'default)
  (setq TeX-parse-self t)
  ;; (latex-preview-pane-enable)
#+end_src

** Sciences Configuration
# #+begin_src emacs-lisp
#     (use-package auctex-lua)
#     (use-package auctex-latexmk)
#     (use-package textmate)
#     (use-package cdlatex)
#     (use-package latex-extra)
#     (use-package latex-math-preview)
#     (use-package latex-unicode-math-mode)
#     (use-package ebib)
# #+end_src


# Enable a minor mode for dealing with math (it adds a few useful keybindings),
# and always treat the current file as the "main" file. That's intentional, since
# I'm usually actually in an org document.

# #+begin_src emacs-lisp
#   (add-hook 'LaTeX-mode-hook
#             (lambda ()
#               (LaTeX-math-mode)
#               (setq TeX-master t)))
# #+end_src

* Blogging

# I maintain a blog written in Jekyll. There are plenty of command-line tools to
# automate creating a new post, but staying in my editor minimizes friction and
# encourages me to write.

# This defines a =zb/new-blog-post= function, which prompts the user for a title
# and creates a new draft (with a slugged file name) in the blog's =_drafts/=
# directory. The new post includes appropriate YAML header information.

# This also defines =zb/publish-post= and =zb/unpublish-post=, which adjust the
# date in the YAML front matter and rename the file appropriately.

# #+begin_src emacs-lisp
# 	(defvar zb/jekyll-drafts-directory "/home/zb/Documents/blog/_drafts/")
# 	(defvar zb/jekyll-posts-directory "/home/zb/Documents/blog/_posts/")
# 	(defvar zb/jekyll-post-extension ".md")

# 	(defun zb/timestamp ()
# 		(format-time-string "%Y-%m-%d"))

# 	(defun zb/replace-whitespace-with-hyphens (s)
# 		(replace-regexp-in-string " " "-" s))

# 	(defun zb/replace-nonalphanumeric-with-whitespace (s)
# 		(replace-regexp-in-string "[^A-Za-z0-9 ]" " " s))


# 	(defun zb/replace-unusual-characters (title)
# 		"Remove quotes, downcase everything, and replace characters
# 	that aren't alphanumeric with hyphens."
# 		(zb/replace-whitespace-with-hyphens
# 		 (s-trim
# 			(downcase
# 			 (zb/replace-nonalphanumeric-with-whitespace
# 				(zb/remove-quotes title))))))

# 	(defun zb/slug-for (title)
# 		"Given a blog post title, return a convenient URL slug.
# 		 Downcase letters and remove special characters."
# 		(let ((slug (zb/replace-unusual-characters title)))
# 			(while (string-match "--" slug)
# 				(setq slug (replace-regexp-in-string "--" "-" slug)))
# 			slug))

# 	(defun zb/jekyll-yaml-template (title)
# 		"Return the YAML header information appropriate for a blog
# 		 post. Include the title, the current date, the post layout,
# 		 and an empty list of tags."
# 		(concat
# 		 "---\n"
# 		 "title: " title "\n"
# 		 "date:\n"
# 		 "layout: post\n"
# 		 "# pdf_file: " (zb/slug-for title) ".pdf\n"
# 		 "tags: []\n"
# 		 "---\n\n"))

# 	(defun zb/new-blog-post (title)
# 		"Create a new blog draft in Jekyll."
# 		(interactive "sPost title: ")
# 		(let ((post (concat zb/jekyll-drafts-directory
# 												(zb/slug-for title)
# 												zb/jekyll-post-extension)))
# 			(if (file-exists-p post)
# 					(find-file post)
# 				(find-file post)
# 				(insert (zb/jekyll-yaml-template title)))))

# 	(defun zb/jekyll-draft-p ()
# 		"Return true if the current buffer is a draft."
# 		(equal
# 		 (file-name-directory (buffer-file-name (current-buffer)))
# 		 zb/jekyll-drafts-directory))

# 	(defun zb/jekyll-published-p ()
# 		"Return true if the current buffer is a published post."
# 		(equal
# 		 (file-name-directory (buffer-file-name (current-buffer)))
# 		 zb/jekyll-posts-directory))

# 	(defun zb/publish-post ()
# 		"Move a draft post to the posts directory, rename it to include
# 	the date, reopen the new file, and insert the date in the YAML
# 	front matter."
# 		(interactive)
# 		(cond ((not (zb/jekyll-draft-p))
# 					 (message "This is not a draft post."))
# 					((buffer-modified-p)
# 					 (message "Can't publish post; buffer has modifications."))
# 					(t
# 					 (let ((filename
# 									(concat zb/jekyll-posts-directory
# 													(zb/timestamp) "-"
# 													(file-name-nondirectory
# 													 (buffer-file-name (current-buffer)))))
# 								 (old-point (point)))
# 						 (rename-file (buffer-file-name (current-buffer))
# 													filename)
# 						 (kill-buffer nil)
# 						 (find-file filename)
# 						 (set-window-point (selected-window) old-point)
# 						 (save-excursion
# 							 (beginning-of-buffer)
# 							 (replace-regexp "^date:$" (concat "date: " (zb/timestamp))))
# 						 (save-buffer)
# 						 (message "Published post!")))))

# 	(defun zb/unpublish-post ()
# 		"Move a published post to the drafts directory, rename it to
# 	exclude the date, reopen the new file, and remove the date in the
# 	YAML front matter."
# 		(interactive)
# 		(cond ((not (zb/jekyll-published-p))
# 					 (message "This is not a published post."))
# 					((buffer-modified-p)
# 					 (message "Can't publish post; buffer has modifications."))
# 					(t
# 					 (let ((filename
# 									(concat zb/jekyll-drafts-directory
# 													(substring
# 													 (file-name-nondirectory
# 														(buffer-file-name (current-buffer)))
# 													 11 nil)))
# 								 (old-point (point)))
# 						 (rename-file (buffer-file-name (current-buffer))
# 													filename)
# 						 (kill-buffer nil)
# 						 (find-file filename)
# 						 (set-window-point (selected-window) old-point)
# 						 (save-excursion
# 							 (beginning-of-buffer)
# 							 (replace-regexp "^date: [0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$" "date:"))
# 						 (save-buffer)
# 						 (message "Returned post to drafts!")))))
# #+end_src

# This selects and inserts a tag:

# #+begin_src emacs-lisp
#   (defun zb/existing-blog-tags ()
#     "Return a list of all the tags currently used in my blog."
#     (split-string (shell-command-to-string "cd ~/Documents/blog && rake tags")))

#   (defun zb/insert-blog-tag ()
#     "Prompt for one of the existing tags used in the blog and
#   insert it in the YAML front matter appropriately."
#     (interactive)
#     (save-excursion
#       (beginning-of-buffer)
#       (search-forward-regexp "^tags: \\[")
#       (insert
#        (ivy-completing-read "Insert tag: " (zb/existing-blog-tags))
#        (if (looking-at "\\]") "" ", ")))
#     (message "Tagged!"))
# #+end_src




# # ** Look up definitions in Webster 1913

# # I look up definitions by hitting =C-x w=, which shells out to =sdcv=. I've
# # loaded that with the (beautifully lyrical) 1913 edition of Webster's dictionary,
# # so these definitions are a lot of fun.

# # #+begin_src emacs-lisp
# #   (defun zb/dictionary-prompt ()
# #     (read-string
# #      (format "Word (%s): " (or (zb/region-or-word) ""))
# #      nil
# #      nil
# #      (zb/region-or-word)))

# #   (defun zb/dictionary-define-word ()
# #     (interactive)
# #     (let* ((word (zb/dictionary-prompt))
# #            (buffer-name (concat "Definition: " word)))
# #       (with-output-to-temp-buffer buffer-name
# #         (shell-command (format "sdcv -n %s" word) buffer-name))))

# #   (define-key global-map (kbd "C-x w") 'zb/dictionary-define-word)
# # #+end_src

# # ** Look up words in a thesaurus

# # Hitting =C-x s= searches for synonyms for the word at point.

# # #+begin_src emacs-lisp
# #   (use-package powerthesaurus
# #     :bind
# #     ("C-x s" . powerthesaurus-lookup-word-dwim))
# # #+end_src

# # ** Editing with Markdown

# # Because I can't always use =org=.

# # - Associate =.md= files with GitHub-flavored Markdown.
# # - Use =pandoc= to render the results.
# # - Leave the code block font unchanged.

# # #+begin_src emacs-lisp
# #   (use-package markdown-mode
# #     :commands gfm-mode

# #     :mode (("\\.md$" . gfm-mode))

# #     :config
# #     (setq markdown-command "pandoc --standalone --mathjax --from=markdown")
# #     (custom-set-faces
# #      '(markdown-code-face ((t nil)))))
# # #+end_src

# # ** Cycle between spacing alternatives

# # Successive calls to =cycle-spacing= rotate between changing the whitespace
# # around point to:

# # - A single space,
# # - No spaces, or
# # - The original spacing.

# # Binding this to =M-SPC= is strictly better than the original binding of
# # =just-one-space=.

# # #+begin_src emacs-lisp
# #   (global-set-key (kbd "M-SPC") 'cycle-spacing)
# # #+end_src

# # ** Enable region case modification

# # #+begin_src emacs-lisp
# #   (put 'downcase-region 'disabled nil)
# #   (put 'upcase-region 'disabled nil)
# # #+end_src

# # ** Quickly explore my "notes" directory with =deft=

# # #+begin_src emacs-lisp
# #   (use-package deft
# #     :bind ("C-c n" . deft)
# #     :commands (deft)
# #     :config

# #     (setq deft-directory "~/Documents/notes"
# #           deft-recursive t
# #           deft-use-filename-as-title t)

# #     (evil-set-initial-state 'deft-mode 'emacs))
# # #+end_src

# # * File management with =dired=

# # Hide dotfiles by default, but toggle their visibility with =.=.

# # #+begin_src emacs-lisp
# #   (use-package dired-hide-dotfiles
# #     :config
# #     (dired-hide-dotfiles-mode)
# #     (define-key dired-mode-map "." 'dired-hide-dotfiles-mode))
# # #+end_src

# # Open media with the appropriate programs.

# # #+begin_src emacs-lisp
# #   (use-package dired-open
# #     :config
# #     (setq dired-open-extensions
# #           '(("avi" . "mpv")
# #             ("cbr" . "comix")
# #             ("doc" . "abiword")
# #             ("docx" . "abiword")
# #             ("gif" . "ffplay")
# #             ("gnumeric" . "gnumeric")
# #             ("html" . "firefox")
# #             ("jpeg" . "s")
# #             ("jpg" . "s")
# #             ("mkv" . "mpv")
# #             ("mov" . "mpv")
# #             ("mp3" . "mpv")
# #             ("mp4" . "mpv")
# #             ("pdf" . "zathura")
# #             ("png" . "s")
# #             ("webm" . "mpv")
# #             ("xls" . "gnumeric")
# #             ("xlsx" . "gnumeric"))))
# # #+end_src

# # These are the switches that get passed to =ls= when =dired= gets a list of
# # files. We're using:

# # - =l=: Use the long listing format.
# # - =h=: Use human-readable sizes.
# # - =v=: Sort numbers naturally.
# # - =A=: Almost all. Doesn't include "=.=" or "=..=".


# # #+begin_src emacs-lisp
# #   (setq-default dired-listing-switches "-lhvA")
# #   (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))
# # #+end_src

# # Set up DWIM ("do what I mean") for =dired=. When I've got two =dired= windows
# # side-by-side, and I move or copy files in one window, this sets the default
# # location to the other window.

# # #+begin_src emacs-lisp
# #   (setq dired-dwim-target t)
# # #+end_src

# # Kill buffers of files/directories that are deleted in =dired=.

# # #+begin_src emacs-lisp
# #   (setq dired-clean-up-buffers-too t)
# # #+end_src

# # Always copy directories recursively instead of asking every time.

# # #+begin_src emacs-lisp
# #   (setq dired-recursive-copies 'always)
# # #+end_src

# # Ask before recursively /deleting/ a directory, though.

# # #+begin_src emacs-lisp
# #   (setq dired-recursive-deletes 'top)
# # #+end_src

# # Files are normally moved and copied synchronously. This is fine for small or
# # local files, but copying a large file or moving a file across a mounted network
# # drive blocks Emacs until the process is completed. Unacceptable!

# # This uses =emacs-async= to make =dired= perform actions asynchronously.

# # #+begin_src emacs-lisp
# #   (use-package async
# #     :config
# #     (dired-async-mode 1))
# # #+end_src

# # Use "j" and "k" to move around in =dired=.

# # #+begin_src emacs-lisp
# #   (evil-define-key 'normal dired-mode-map (kbd "j") 'dired-next-line)
# #   (evil-define-key 'normal dired-mode-map (kbd "k") 'dired-previous-line)
# # #+end_src

# # I'm often browsing directories of photos and images, so this binds "v" to view a
# # slideshow of the current directory with =s= (a custom =feh= wrapper defined
# # elsewhere in this repo).

# # #+begin_src emacs-lisp
# #   (defun zb/dired-slideshow ()
# #     (interactive)
# #     (start-process "dired-slideshow" nil "s" (dired-current-directory)))

# #   (evil-define-key 'normal dired-mode-map (kbd "v") 'zb/dired-slideshow)
# # #+end_src

* Editing settings

** Quickly visit Emacs configuration

I futz around with my dotfiles a lot. This binds =C-c e= to quickly open my
Emacs configuration file.

#+begin_src emacs-lisp
  (defun zb/visit-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))

  (global-set-key (kbd "C-c e") 'zb/visit-emacs-config)
#+end_src

** Always kill current buffer

Assume that I always want to kill the current buffer when hitting =C-x k=.

#+begin_src emacs-lisp
  (defun zb/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'zb/kill-current-buffer)
#+end_src

# ** Set up =helpful=

# The =helpful= package provides, among other things, more context in Help
# buffers.

# #+begin_src emacs-lisp
#   (use-package helpful)

#   (global-set-key (kbd "C-h f") #'helpful-callable)
#   (global-set-key (kbd "C-h v") #'helpful-variable)
#   (global-set-key (kbd "C-h k") #'helpful-key)
#   (evil-define-key 'normal helpful-mode-map (kbd "q") 'quit-window)
# #+end_src

** Look for executables in =/usr/local/bin=

#+begin_src emacs-lisp
  (zb/append-to-path "/usr/local/bin")
#+end_src

** Save my location within a file

Using =save-place-mode= saves the location of point for every file I visit. If I
close the file or close the editor, then later re-open it, point will be at the
last place I visited.

#+begin_src emacs-lisp
  (save-place-mode t)
#+end_src

** Always indent with spaces

Never use tabs. Tabs are the devil’s whitespace.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** Install and configure =which-key=

=which-key= displays the possible completions for a long keybinding. That's
really helpful for some modes (like =projectile=, for example).

#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+end_src

** Configure =yasnippet=

#+begin_src emacs-lisp
  (use-package yasnippet)
#+end_src

I keep my snippets in =~/.emacs/snippets/text-mode=, and I always want =yasnippet=
enabled.

#+begin_src emacs-lisp
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
;;  (setq yas-snippet-dirs '("~/.emacs.d/snippets/text-mode"))
  (yas-global-mode t)
#+end_src

I /don’t/ want =yas= to automatically indent the snippets it inserts. Sometimes
this looks pretty bad (when indenting org-mode, for example, or trying to guess
at the correct indentation for Python).

#+begin_src emacs-lisp
  (setq yas-indent-line 'auto)
#+end_src

# ** Configure =ivy= and =counsel=

# I use =ivy= and =counsel= as my completion framework.

# This configuration:

# - Uses =counsel-M-x= for command completion,
# - Replaces =isearch= with =swiper=,
# - Uses =smex= to maintain history,
# - Enables fuzzy matching everywhere except swiper (where it's thoroughly
#   unhelpful), and
# - Includes recent files in the switch buffer.

# #+begin_src emacs-lisp
#   (use-package counsel
#     :bind
#     ("M-x" . 'counsel-M-x)
#     ("C-s" . 'swiper)

#     :config
#     (use-package flx)
#     (use-package smex)

#     (ivy-mode 1)
#     (setq ivy-use-virtual-buffers t)
#     (setq ivy-count-format "(%d/%d) ")
#     (setq ivy-initial-inputs-alist nil)
#     (setq ivy-re-builders-alist
#           '((swiper . ivy--regex-plus)
#             (t . ivy--regex-fuzzy))))
# #+end_src

** Switch and rebalance windows when splitting

When splitting a window, I invariably want to switch to the new window. This
makes that automatic.

#+begin_src emacs-lisp
  (defun zb/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun zb/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'zb/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'zb/split-window-right-and-switch)
#+end_src

# ** Mass editing of =grep= results

# I like the idea of mass editing =grep= results the same way I can edit filenames
# in =dired=. These keybindings allow me to use =C-x C-q= to start editing =grep=
# results and =C-c C-c= to stop, just like in =dired=.

# #+begin_src emacs-lisp
#   (use-package wgrep)

#   (eval-after-load 'grep
#     '(define-key grep-mode-map
#       (kbd "C-x C-q") 'wgrep-change-to-wgrep-mode))

#   (eval-after-load 'wgrep
#     '(define-key grep-mode-map
#       (kbd "C-c C-c") 'wgrep-finish-edit))

#   (setq wgrep-auto-save-buffer t)
# #+end_src

** Use projectile everywhere

#+begin_src emacs-lisp
  (projectile-global-mode)
#+end_src

** Add a bunch of engines for =engine-mode=

Enable [[https://github.com/zb/engine-mode][engine-mode]] and define a few useful engines.

#+begin_src emacs-lisp
  (use-package engine-mode)
  (require 'engine-mode)

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")

  (defengine rfcs
    "http://pretty-rfc.herokuapp.com/search?q=%s")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")

  (defengine wiktionary
    "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

  (defengine youtube
    "https://www.youtube.com/results?search_query=%s")

  (engine-mode t)
#+end_src

* Set custom keybindings

Just a few handy functions.

# #+begin_src emacs-lisp
#   (global-set-key (kbd "C-w") 'backward-kill-word)
#   (global-set-key (kbd "M-o") 'other-window)
# #+end_src

Remap when working in terminal Emacs.

#+begin_src emacs-lisp
  (define-key input-decode-map "\e[1;2A" [S-up])
#+end_src
* Extra

# #+begin_src emacs-lisp
#   (load-file "~/.emacs-private.el")
# #+end_src

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
# ;; elfeed feed reader
# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#  (global-set-key (kbd "C-x w") 'elfeed)
#  (setq elfeed-feeds
#        '(("https://www.theverge.com/rss/index.xml" blog tech)
#  	("http://feeds.arstechnica.com/arstechnica/index" blog tech)
#  	("https://feeds.npr.org/1001/rss.xml" blog news)))
#  (setq-default elfeed-search-filter "@1-week-ago ")


#  use an org file to organise feeds
#  (use-package elfeed-org
#  (elfeed-org
#    :ensure t
#    :config
#    (elfeed-org)
#    (setq rmh-elfeed-org-files (list "~/Coding/rss_feeds.org")))

#  (setq rmh-elfeed-org-files (list "~/Coding/rss_feeds.org"))
#  shortcut functions
#  (defun bjm/elfeed-show-all ()
#    (interactive)
#    (bookmark-maybe-load-default-file)
#    (bookmark-jump "elfeed-all"))
#  (defun bjm/elfeed-show-emacs ()
#    (interactive)
#    (bookmark-maybe-load-default-file)
#    (bookmark-jump "elfeed-emacs"))
#  (defun bjm/elfeed-show-daily ()
#    (interactive)
#    (bookmark-maybe-load-default-file)
#    (bookmark-jump "elfeed-daily"))

#  (use-package elfeed
#    :ensure t
#    :bind (:map elfeed-search-mode-map
#                ("A" . bjm/elfeed-show-all)
#                ("E" . bjm/elfeed-show-emacs)
#                ("D" . bjm/elfeed-show-daily)
#                ("q" . bjm/elfeed-save-db-and-bury)))
